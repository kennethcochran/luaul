-- OptimisticSide
-- 5/1/2022
-- Luau parser

-- luacheck: push globals script
local AstNode = require(_VERSION == "Luau" and script.Parent.AstNode or "./AstNode.lua")
local Token = require(_VERSION == "Luau" and script.Parent.Token or "./Token.lua")
-- luacheck: pop

local Parser = {}
Parser.__index = Parser

Parser.SimpleTokens = {
	[Token.Kind.True] = AstNode.Kind.True,
	[Token.Kind.False] = AstNode.Kind.False,
	[Token.Kind.Nil] = AstNode.Kind.Nil,
	[Token.Kind.Dot3] = AstNode.Kind.Dot3,
}

Parser.UnaryOpers = {
	[Token.Kind.Hashtag] = AstNode.Kind.Len,
	[Token.Kind.ReservedNot] = AstNode.Kind.Not,
	[Token.Kind.Minus] = AstNode.Kind.Minus
}

Parser.BinaryOpers = {
	[Token.Kind.Plus] = AstNode.Kind.Add,
	[Token.Kind.Minus] = AstNode.Kind.Sub,
	[Token.Kind.Star] = AstNode.Kind.Mul,
	[Token.Kind.Slash] = AstNode.Kind.Div,
	[Token.Kind.Percent] = AstNode.Kind.Mod,
	[Token.Kind.Caret] = AstNode.Kind.Pow,
	[Token.Kind.Dot2] = AstNode.Kind.Concat,
	[Token.Kind.NotEqual] = AstNode.Kind.CompareNe,
	[Token.Kind.Equal] = AstNode.Kind.CompareEq,
	[Token.Kind.LessThan] = AstNode.Kind.CompareLt,
	[Token.Kind.LessEqual] = AstNode.Kind.CompareLe,
	[Token.Kind.GreaterThan] = AstNode.Kind.CompareGt,
	[Token.Kind.GreaterEqual] = AstNode.Kind.CompareGe,
	[Token.Kind.ReservedAnd] = AstNode.Kind.And,
	[Token.Kind.ReservedOr] = AstNode.Kind.Or,
}

function Parser.new(tokens, advancer)
	local self = {}
	setmetatable(self, Parser)

	self._tokens = tokens
	self._advancer = advancer or next(tokens) -- TODO: This might be wrong.
	self._token = self._advancer(self._token)

	return self
end

function Parser.is(object)
	return type(object) == "table" and getmetatable(object) == Parser
end

--[[
	Creates an operator parsing routine, from a generic function.

	This is done to avoid repeating code, and will return a function that will
	parse the provided operators, and call the provided subparser to get the
	operands.
]]
function Parser.useGeneric(generic, subParser, operators)
	return function(self)
		return generic(self, operators, subParser)
	end
end

--[[
	Determines whether a statement is the last statement of a block.

	This saves us time because we won't have to parse statements after
	it.
]]
function Parser.isLastStat(stat)
	return stat.kind == AstNode.Kind.Break
		or stat.Kind == AstNode.Kind.Continue
		or stat.kind == AstNode.Kind.Break
		or stat.kind == AstNode.Kind.Return
end

--[[
	Throws an error generated by the parser.

	Note that this can be overriden by the user (since it's retrieved
	through the __index metamethod).
]]
-- luacheck: ignore self
function Parser:_error(formatString, ...)
	error(formatString:format(...))
end

--[[
	Advances to the next token.
]]
function Parser:_advance()
	self._token = self._advancer(self._token)
end

--[[
	Accepts a token if valid, and returns nil otherwise.
]]
function Parser:_accept(tokenKind)
	local token = self._token
	if token and token.kind == tokenKind then
		self:_advance()
		return token
	end
end

--[[
	Peeks for a token and returns it, but does not actually consume it.
]]
function Parser:_peek(tokenKind)
	local token = self._token
	if token and token.kind == tokenKind then
		return token
	end
end

--[[
	Expects to read a certain type of token. If this token is not found,
	then it will throw a parse-error.
]]
function Parser:_expect(tokenKind)
	local token = self:_accept(tokenKind)
	if not token or token.kind ~= tokenKind then
		self:_error(
			"Expected %s, got %s at %s",
			Token.kindString(tokenKind),
			Token.kindString(token.kind),
			token.position
		)
		return
	end
	return token
end

function Parser:genericBinary(tokens, subParser)
	local left = subParser()

	if self:_reachedEnd() then
		return left
	end

	while true do
		local token = nil
		for _, possibleToken in ipairs(tokens) do
			if self:_accept(possibleToken) then
				token = possibleToken
			end
		end

		if not token then
			break
		end

		local right = subParser()
		local nodeKind = Parser.BinaryOpers[token]
		left = AstNode.new(nodeKind, left, right)
	end

	return left
end

function Parser:genericPrefix(tokens, subParser)
	local left = subParser()
	local stack = {}

	if not left then
		return
	end

	while true do
		local token = nil
		for _, possibleToken in ipairs(tokens) do
			if self:_accept(possibleToken) then
				token = possibleToken
			end
		end

		if token then
			break
		end

		table.insert(stack, token)
	end

	-- We must use a numeric-for loop so that we can go backwards
	-- through the stack, starting at the top.
	for i = #stack, 1, -1 do
		local nodeKind = Parser.UnaryOpers[stack[i]]
		left = AstNode.new(nodeKind, left)
	end

	return left
end

function Parser:genericPostfix(tokens, subParser)
	local left = subParser()

	while true do
		local token = nil
		for _, possibleToken in ipairs(tokens) do
			if self:_accept(possibleToken) then
				token = possibleToken
			end
		end

		if not token then
			break
		end

		local nodeKind = Parser.UnaryOpers[token]
		left = AstNode.new(nodeKind, left)
	end

	return left
end

-- Generic operator usage.
Parser.parsePow = Parser.useGeneric(Parser.genericBinary, Parser.parseAssertionExpr, Token.Kind.Caret)
Parser.parseUnary = Parser.useGeneric(Parser.genericPrefix, Parser.genericBinary,
	Token.Kind.Minus, Token.Kind.ReservedNot)

Parser.parseFactor = Parser.useGeneric(Parser.genericBinary, Parser.parseUnary, Token.Kind.Modulo)
Parser.parseMulExpr = Parser.useGeneric(Parser.genericBinary, Parser.parseMulExpr,
	Token.Kind.Star, Token.Kind.Slash, Token.Kind.Modulo)

Parser.parseSumExpr = Parser.useGeneric(Parser.genericBinary, Parser.parseMulExpr, Token.Kind.Plus, Token.Kind.Minus)
Parser.parseConcatExpr = Parser.useGeneric(Parser.genericBinary, Parser.parseSumExpr, Token.Kind.Dot2)
Parser.parseCompareExpr = Parser.useGeneric(Parser.genericBinary, Parser.pprseConcatExpr, Token.Kind.LessThan,
	Token.Kind.LessEqual, Token.Kind.GreaterThan, Token.Kind.GreaterEqual, Token.Kind.Equal, Token.Kind.NotEqual)

Parser.parseAndExpr = Parser.useGeneric(Parser.genericBinary, Parser.parseCompareExpr, Token.Kind.And)
Parser.parseOrExpr = Parser.useGeneric(Parser.genericBinary, Parser.parseAndExpr, Token.Kind.Or)
Parser.parseExpr = Parser.parseOrExpr

function Parser:parseTableConstructor()
	local fields = {}

	while not self:_accept(Token.Kind.RightBrace) do
		-- [exp] = exp
		if self:_accept(Token.Kind.LeftBracket) then
			local key = self:parseExpr()
			self:_expect(Token.Kind.RightBracket)

			self:_expect(Token.Kind.Equal)
			local value = self:parseExpr()
			table.insert(fields, { key, value })

		elseif self:_peek(Token.Kind.Name) then
			-- If we see a name, it could either be the key of a value
			-- in the table, or just be a variable.
			local name = self:_accept(Token.Kind.Name)

			-- name = exp
			if self:_accept(Token.Kind.Equal) then
				local value = self:parseExpr()
				table.insert(fields, { name, value })

			-- name
			else
				table.insert(fields, name)
			end
		end

		-- TODO: Accept a semi-colon or comma here. Also, how will we
		-- ensure the user placed a semi-colon or comma before the next
		-- field?
	end

	return AstNode.fromArray(AstNode.Kind.TableConstructor, fields)
end

function Parser:parseSimpleExpr()
	-- Parser for simple tokens, where the corresponding node
	-- can be found through a table.
	local nodeKind = Parser.SimpleTokens[self._token.kind]
	if nodeKind then
		return AstNode.new(nodeKind)
	end

	-- Table constructor parser.
	if self:_peek(Token.Kind.LeftBrace) then
		return self:parseTableConstructor()
	end
end

function Parser:parsePrefixExpr()
	if self:_accept(Token.Kind.LeftParen) then
		local expr = self:parseExpr()
		self:_expect(Token.Kind.RightParen)
		return expr
	end

	-- TODO: Parse name expression.
end

function Parser:parseTypeAnnotation()
	local parts = { self:parseSimpleTypeAnnotation() }
	local isIntersection = false
	local isUnion = false

	while true do
		if self:_accept(Token.Kind.Pipe) then
			table.insert(parts, self:parseSimpleTypeAnnotation())
			isUnion = true

		elseif self:_accept(Token.Kind.And) then
			table.insert(parts, self:parseSimpleTypeAnnotation())
			isIntersection = true

		-- luacheck: ignore
		elseif self:_accept(Token.Kind.QuestionMark) then
			-- TODO: Add support for this.

		else
			break
		end
	end

	if isUnion and isIntersection then
		return self:_error("Cannot combine unions and intersections")
	end

	if isUnion then
		return AstNode.fromArray(AstNode.Kind.TypeUnion, parts)
	end

	if isIntersection then
		return AstNode.fromArray(AstNode.Kind.TypeIntersection, parts)
	end

	-- If we didn't have an intersection or a union, then we can assume we
	-- only had 1 element in the array.
	return parts[1]
end

function Parser:parseAssertionExpr()
	local expr = self:parseSimpleExpr()

	if self._options.allowTypeAnnotations and self:_accept(Token.Kind.DoubleColon) then
		local annotation = self:parseTypeAnnotation()
		expr = AstNode.new(AstNode.Kind.TypeAssertion, expr, annotation)
	end

	return expr
end

function Parser:parseFunctionArgs()
	if self:_peekAcept(Token.Kind.LeftBrace) then
		return { self:parseTableConstructor() }
	end

	if self:_peek(Token.Kind.String) then
		return { self:_accept(Token.Kind.String) }
	end

	-- Since we've already checked for all other forms of providing function
	-- arguments, we can expect the user to provide normal function arguments
	-- with parentheses.
	self:_expect(Token.Kind.LeftParen)
	local args = {}

	while not self:_accept(Token.Kind.RightParen) do
		if #args then
			self:_expect(Token.Kind.Comma)
		end

		table.insert(args, self:parseExpr())
	end

	return args
end

function Parser:parsePrimaryExpr()
	local expr = self:parsePrefixExpr()

	while true do
		-- prefixexpr.name
		if self:_accept(Token.Kind.Dot) then
			expr = AstNode.new(AstNode.Kind.IndexName, expr, self:parseName())

		-- prefixexpr[expr]
		elseif self:_accept(Token.Kind.LeftBracket) then
			expr = AstNode.new(AstNode.Kind.IndexExpr, expr, self:parseExpr())
			self:_expect(Token.Kind.RightBracket)

		-- prefixexpr:name(functionargs)
		elseif self:_accept(Token.Kind.Colon) then
			local func = AstNode.new(AstNode.Kind.ColonIndex, expr, self:parseName())
			-- TODO: Provide `self` flag to Parser::parseFunctionArgs?
			expr = AstNode.new(AstNode.Kind.FunctionCall, func, self:parseFunctionArgs())

		-- prefixexpr(functionargs) | prefixexpr{tableconstructor} | prefixexpr string
		elseif
			self:_peek(Token.Kind.LeftParen)
			or self:_peek(Token.Kind.LeftBrace)
			or self:_peek(Token.Kind.String)
		then
			expr = AstNode.new(AstNode.Kind.FunctionCall, expr, self:parseFunctionArgs())

		else
			break
		end
	end

	return expr
end

function Parser:parseExpr()
end

function Parser:parseStat()
	-- Do-block parser.
	if self:_accept(Token.Kind.Do) then
		local body = self:parseBlock()
		self:_expect(Token.Kind.End)
		return AstNode.new(AstNode.Kind.DoBlock, body)
	end

	-- While-loop parser.
	if self:_accept(Token.Kind.While) then
		local condition = self:parseExpr()
		self:_expect(Token.Kind.Do)

		local body = self:parseBlock()
		self:_expect(Token.Kind.End)

		return AstNode.new(AstNode.Kind.WhileLoop, condition, body)
	end

	-- Repeat-until loop parser.
	-- Essentially the same as the while-loop parser, except it expects
	-- a `until` instead of `do`.
	if self:_accept(Token.Kind.Repeat) then
		local condition = self:parseExpr()
		self:_expect(Token.Kind.Until)

		local body = self:parseBlock()
		self:_expect(Token.Kind.End)

		return AstNode.new(AstNode.Kind.RepeatLoop, condition, body)
	end

	-- If-block parser.
	if self:_accept(Token.Kind.If) then
		local ifCondition = self:parseExpr()
		self:_expect(Token.Kind.Then)

		local thenBlock = self:parseBlock()
		local blocks = { { ifCondition, thenBlock }  }

		while self:_accept(Token.Kind.ElseIf) do
			local elseIfCondition = self:parseExpr()
			self:_expect(Token.Kind.Then)
			table.insert(blocks, { elseIfCondition, self:parseBlock() })
		end

		if self:_accept(Token.Kind.Else) then
			table.insert(blocks, self:parseBlock())
		end

		self:_accept(Token.Kind.End)
		-- Each block is in the block array (in order)
		-- `elseif` and `if` statements are stored as an array containing
		-- their condition and block. `then` statements are just stored
		-- as just their block.
		return AstNode.fromArray(AstNode.Kind.IfStat, blocks)
	end
end

function Parser:parseBlock()
	local stats = {}
	local stat

	repeat
		stat = self:parseStat()
		table.insert(stats, stat)
		self:_accept(Token.Kind.SemiColon)
	until not Parser.isLastStat(stat)

	return AstNode.fromArray(AstNode.Kind.Block, stats)
end

--[[
	Main parsing routine. Parses a chunk of luau code.
--]]
function Parser:parseChunk()
	local root = self:parseBlock()
	self.result = root
	return root
end

return Parser
